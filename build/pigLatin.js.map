{"version":3,"sources":["../lib/pigLatin.js"],"names":["original","$","clone","chrome","runtime","onMessage","addListener","request","sender","translate","elements","document","querySelector","node","walker","createNodeIterator","NodeFilter","SHOW_TEXT","acceptNode","nodeValue","FILTER_ACCEPT","nextNode","console","log","newNode","split","map","word","pigLatin","join","html","test","firstPart","slice","firstVowelIndex","secondPart","vowels","match","indexOf"],"mappings":"AAAA,IAAIA,WAAWC,EAAE,MAAF,EAAUC,KAAV,EAAf;;AAEAC,OAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CAAqC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC9D,MAAID,QAAQE,SAAZ,EAAuB;AACrB,QAAIC,WAAWC,SAASC,aAAT,CAAuB,MAAvB,CAAf;AACA,QAAIC,IAAJ;AACA,QAAIC,SAASH,SAASI,kBAAT,CAA4BL,QAA5B,EAAsCM,WAAWC,SAAjD,EAA4D,EAAEC,YAAY,UAAUL,IAAV,EAAgB;AACnG,YAAIA,KAAKM,SAAT,EAAoB;AAClB,iBAAOH,WAAWI,aAAlB;AACD;AACF;AAJsE,KAA5D,EAKV,KALU,CAAb;AAMA,WAAOP,OAAOC,OAAOO,QAAP,EAAd,EAAiC;AAC/BC,cAAQC,GAAR,CAAYV,IAAZ;AACA,UAAIW,UAAUX,KAAKM,SAAL,CAAeM,KAAf,CAAqB,GAArB,EAA0BC,GAA1B,CAA8BC,QAAQC,SAASD,IAAT,CAAtC,EAAsDE,IAAtD,CAA2D,GAA3D,CAAd;;AAEAhB,WAAKM,SAAL,GAAiBK,OAAjB;AACD;AACF,GAfD,MAeO;AACLvB,MAAE,MAAF,EAAU6B,IAAV,CAAe9B,QAAf;AACD;AACF,CAnBD;;AAqBA,IAAI4B,WAAWD,QAAQ;AACrB,MAAI,iBAAiBI,IAAjB,CAAsBJ,KAAK,CAAL,CAAtB,CAAJ,EAAoC;AAClC,UAAMK,YAAYL,KAAKM,KAAL,CAAW,CAAX,EAAcC,gBAAgBP,IAAhB,CAAd,CAAlB;AACA,UAAMQ,aAAaR,KAAKM,KAAL,CAAWC,gBAAgBP,IAAhB,CAAX,CAAnB;AACA,WAAQ,GAAEQ,UAAW,GAAEH,SAAU,IAAjC;AACD;AACF,CAND;;AAQA,IAAIE,kBAAkBP,QAAQ;AAC5B,QAAMS,SAAST,KAAKU,KAAL,CAAW,UAAX,CAAf;AACA,MAAID,WAAW,IAAf,EAAqB;AACnB,WAAOT,IAAP;AACD;AACD,MAAIS,OAAO,CAAP,KAAa,GAAb,IAAoBT,KAAKA,KAAKW,OAAL,CAAa,GAAb,IAAoB,CAAzB,KAA+B,GAAvD,EAA4D;AAC1D,WAAOX,KAAKW,OAAL,CAAaF,OAAO,CAAP,CAAb,CAAP;AACD;AACD,SAAOT,KAAKW,OAAL,CAAaF,OAAO,CAAP,CAAb,CAAP;AACD,CATD","file":"pigLatin.js","sourcesContent":["var original = $('html').clone();\n\nchrome.runtime.onMessage.addListener(function (request, sender) {\n  if (request.translate) {\n    var elements = document.querySelector('body');\n    var node;\n    var walker = document.createNodeIterator(elements, NodeFilter.SHOW_TEXT, { acceptNode: function (node) {\n        if (node.nodeValue) {\n          return NodeFilter.FILTER_ACCEPT;\n        };\n      }\n    }, false);\n    while (node = walker.nextNode()) {\n      console.log(node);\n      var newNode = node.nodeValue.split(\" \").map(word => pigLatin(word)).join(' ');\n\n      node.nodeValue = newNode;\n    }\n  } else {\n    $('html').html(original);\n  }\n});\n\nvar pigLatin = word => {\n  if (/^[a-zA-Z0-9_]/g.test(word[0])) {\n    const firstPart = word.slice(0, firstVowelIndex(word));\n    const secondPart = word.slice(firstVowelIndex(word));\n    return `${secondPart}${firstPart}ay`;\n  }\n};\n\nvar firstVowelIndex = word => {\n  const vowels = word.match(/[aeiou]/g);\n  if (vowels === null) {\n    return word;\n  }\n  if (vowels[0] == 'u' && word[word.indexOf('u') - 1] == 'q') {\n    return word.indexOf(vowels[1]);\n  }\n  return word.indexOf(vowels[0]);\n};"]}